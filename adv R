1a.
# Load necessary libraries
library(readxl)

# Load the data files
gene_expression_data <- read_excel("Gene_Expression_Data.xlsx")
gene_information <- read.csv("Gene_Information.csv")
sample_information <- read.delim("Sample_Information.tsv", sep = "\t")

# Print the loaded data
cat("Gene Expression Data:\n")
print(head(gene_expression_data))

cat("\nGene Information:\n")
print(head(gene_information))

cat("\nSample Information:\n")
print(head(sample_information))



1a
library(readxl)  # For reading Excel files
library(data.table)  # For reading CSV and TSV files

# Load Gene Expression Data from Excel file
gene_expression_data <- read_excel("Gene_Expression_Data.xlsx")

# Load Gene Information from CSV file
gene_information <- fread("Gene_Information.csv")

# Load Sample Information from TSV file
sample_information <- fread("Sample_Information.tsv", header = TRUE)

# Inspect the first few rows of each data frame
head(gene_expression_data)
head(gene_information)
head(sample_information)


1b
# Extract phenotype information from sample_information
phenotype <- sample_information$group
names(phenotype) <- rownames(sample_information)

# Update column names in gene_expression_data
new_colnames <- colnames(gene_expression_data)
new_colnames[-1] <- sapply(new_colnames[-1], function(x) paste0(x, "_", phenotype[x]))
colnames(gene_expression_data) <- new_colnames

# Print the updated gene expression data with new column names
cat("\nUpdated Gene Expression Data (with renamed columns):\n")
print(head(gene_expression_data))


1c
# Filter columns for tumor and normal data
tumor_data <- gene_expression_data[, grepl("_tumor", colnames(gene_expression_data))]
normal_data <- gene_expression_data[, grepl("_normal", colnames(gene_expression_data))]

# Add the Probe_ID back to each dataset
tumor_data <- cbind(Probe_ID = gene_expression_data$Probe_ID, tumor_data)
normal_data <- cbind(Probe_ID = gene_expression_data$Probe_ID, normal_data)

# Print the tumor and normal datasets
cat("\nTumor Data:\n")
print(head(tumor_data))

cat("\nNormal Data:\n")
print(head(normal_data))



1d
# Compute average expression for tumor and normal datasets
tumor_avg_expression <- rowMeans(tumor_data[,-1], na.rm = TRUE)
normal_avg_expression <- rowMeans(normal_data[,-1], na.rm = TRUE)

# Print the average expressions
cat("\nAverage Expression for Tumor Data:\n")
print(tumor_avg_expression)

cat("\nAverage Expression for Normal Data:\n")
print(normal_avg_expression)



1e
# Compute log2 fold change
log2_fold_change <- log2((tumor_avg_expression - normal_avg_expression) / normal_avg_expression)

# Combine results with Probe_ID
results <- data.frame(
  Probe_ID = tumor_data$Probe_ID,
  Tumor_Avg = tumor_avg_expression,
  Normal_Avg = normal_avg_expression,
  Log2_Fold_Change = log2_fold_change
)

# Print the log2 fold change results
cat("\nLog2 Fold Change Results:\n")
print(head(results))


1f
# Merge results with gene information
merged_results <- merge(results, gene_information, by = "Probe_ID")

# Add absolute fold change column
merged_results$Abs_Log2_Fold_Change <- abs(merged_results$Log2_Fold_Change)

# Filter genes with absolute fold change magnitude > 5
significant_genes <- merged_results[merged_results$Abs_Log2_Fold_Change > 5, ]

# Print significant genes
cat("\nSignificant Genes (Fold Change Magnitude > 5):\n")
print(head(significant_genes))


1e
# Add a column to indicate whether the gene is higher expressed in "Normal" or "Tumor"
significant_genes$Higher_Expression <- ifelse(
  significant_genes$Log2_Fold_Change > 0, "Tumor", "Normal"
)

# Print updated significant genes
cat("\nSignificant Genes with Higher Expression Column:\n")
print(head(significant_genes))


2b
# Count DEGs by chromosome
degs_by_chromosome <- table(merged_data$Chromosome)

# Plot histogram
barplot(degs_by_chromosome,
        col = "skyblue",
        las = 2,
        main = "Distribution of Differentially Expressed Genes (DEGs) by Chromosome",
        xlab = "Chromosome",
        ylab = "Number of DEGs")


2c
# Assuming deg_data does not have the Sample_Type column, let's manually add it

# Manually add the Sample_Type column (adjust this according to your data)
deg_data$Sample_Type <- c("Tumor", "Normal", "Tumor", "Normal", "Tumor", "Normal", "Tumor", "Normal")

# Check the structure of deg_data to verify the addition
str(deg_data)

# Ensure Chromosome is a factor (categorical variable)
deg_data$Chromosome <- factor(deg_data$Chromosome)

# Create the histogram segregated by Sample_Type (Normal and Tumor)
ggplot(deg_data, aes(x = Chromosome, fill = Sample_Type)) +
  geom_bar(stat = "count", position = "dodge", color = "black", alpha = 0.7) + 
  labs(title = "Distribution of DEGs by Chromosome and Sample Type", 
       x = "Chromosome", y = "Number of DEGs") +
  scale_fill_manual(values = c("skyblue", "salmon")) +  # Color for Normal and Tumor
  theme_minimal()


2d
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Example data: degs_per_chromosome_normal and degs_per_chromosome_tumor
# Assuming these are vectors containing the DEG counts for Normal and Tumor samples
# Replace these with your actual data
degs_per_chromosome_normal <- c(10, 15, 20, 25, 30)  # Example data for Normal
degs_per_chromosome_tumor <- c(15, 10, 25, 20, 35)  # Example data for Tumor

# Create a data frame
df <- data.frame(Normal = degs_per_chromosome_normal, Tumor = degs_per_chromosome_tumor)

# Calculate the number of upregulated and downregulated genes in tumor samples
upregulated_degs <- sum(df$Tumor > df$Normal)
downregulated_degs <- sum(df$Tumor < df$Normal)
total_degs <- nrow(df)

# Calculate the percentage of upregulated and downregulated genes
upregulated_percentage <- (upregulated_degs / total_degs) * 100
downregulated_percentage <- (downregulated_degs / total_degs) * 100

# Create a data frame for plotting
regulation_data <- data.frame(
  Regulation = c("Upregulated", "Downregulated"),
  Percentage = c(upregulated_percentage, downregulated_percentage)
)

# Create a bar plot to visualize the percentage of up/downregulated DEGs
ggplot(regulation_data, aes(x = Regulation, y = Percentage, fill = Regulation)) +
  geom_bar(stat = "identity", color = "black", alpha = 0.7) +
  scale_fill_manual(values = c("green", "red")) +  # Green for Upregulated, Red for Downregulated
  labs(title = "Percentage of DEGs Up/Downregulated in Tumor Samples",
       x = "Regulation",
       y = "Percentage (%)") +
  theme_minimal()


2e
# Load necessary libraries
library(readxl)    # For reading Excel files
library(pheatmap)  # For creating heatmaps

# Load the gene expression data
gene_expression_data <- read_excel("C:/Users/kdivy/.ipynb_checkpoints/Gene_Expression_Data.xlsx")

# Set the Probe_ID as row names
rownames(gene_expression_data) <- gene_expression_data$Probe_ID

# Remove the Probe_ID column now that it's set as the row name
gene_expression_data <- gene_expression_data[, -which(names(gene_expression_data) == "Probe_ID")]

# Create a heatmap using pheatmap
# Transpose the data so that samples are rows and Probe_IDs are columns
pheatmap(t(gene_expression_data), 
         cluster_rows = TRUE,  # Hierarchical clustering of rows (samples)
         cluster_cols = TRUE,  # Hierarchical clustering of columns (genes)
         scale = "row",        # Normalize gene expression across samples
         color = colorRampPalette(c("blue", "white", "red"))(100),  # Color scale
         main = "Heatmap of Gene Expression by Sample",
         show_rownames = TRUE, # Show gene names on the y-axis
         show_colnames = TRUE, # Show sample names on the x-axis
         fontsize = 10)


2f
# Load necessary libraries
library(readxl)    # For reading Excel files
library(pheatmap)  # For creating heatmaps with clustering
library(RColorBrewer)  # For better color palettes

# Load the gene expression data
gene_expression_data <- read_excel("C:/Users/kdivy/.ipynb_checkpoints/Gene_Expression_Data.xlsx")

# Set the Probe_ID as row names
rownames(gene_expression_data) <- gene_expression_data$Probe_ID

# Remove the Probe_ID column now that it's set as the row name
gene_expression_data <- gene_expression_data[, -which(names(gene_expression_data) == "Probe_ID")]

# Create a clustermap using pheatmap
# Transpose the data so that samples are rows and Probe_IDs are columns
pheatmap(t(gene_expression_data), 
         cluster_rows = TRUE,  # Hierarchical clustering of samples
         cluster_cols = TRUE,  # Hierarchical clustering of genes
         scale = "row",        # Normalize gene expression across samples
         color = colorRampPalette(c("blue", "white", "red"))(100),  # Color scale
         main = "Clustermap of Gene Expression by Sample",
         show_rownames = TRUE, # Show gene names on the y-axis
         show_colnames = TRUE, # Show sample names on the x-axis
         fontsize = 10,
         figsize = c(12, 8))   # Set figure size


2g
1. The histogram presents the distribution of DEGs by chromosome, with some chromosomes having higher concentrations of DEGs.
2. The stacked histogram depicts DEGs by chromosome, further distinguished into upregulated or downregulated genes.
3. In the pie chart, there is an overview of the percentage of genes upregulated in tumor versus normal samples.
4. The heatmap illustrates gene expression levels across tumor and normal samples.
5. The clustermap groups the top 100 genes with the highest log2 fold change to show patterns of similarity in expression.
These analyses inform on differential expression both at gene and sample levels.

